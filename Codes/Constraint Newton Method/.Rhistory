system("pwd")
)
3 * 3/4.5 + 5 * 1/4.5 + 10 * 1/9
beta.est$par
mymix
mix2.est
apply(mix2.est, 2, mean)
beta.est
cnmmixll
cnmmix.ll
ls()
ls("\c")
rm(cnmmix.ll)
rm(snm.sp)
cnm.normmix
cnm.sp(y - 0 - 0 * x)
cnm.sp(c(0, 0), x = x, y = y)
test <- cnm.sp(c(0, 0), x = x, y = y)
str(test)
para
para
para
para
para
mySp
mySp
str(mySp)
ls()
dir()
source("mlogit.R")
source("mlogit.R")
rmlogit
rmlogit()
str(rmlogit())
head(rmlogit())
source("cvp.R")
head(nsSim.df)
str(nsSim.df)
ls()
cvp2(nsSim.df)
head(nsSim.df)
head(cvp2(nsSim.df)
)
print.cvps(nss)
print.cvp2(nss)
para
ls()
rm(para)
setwd("c:/Users/user/Dropbox/Uni Work/Masters Thesis/Codes/State Space Model")
SVfilter
dnormmix
SVfilter
ls()
Kfilter0
dnormmix
est
R
iter
ls()
cnm
cnm.normmix
source("cnm.R")
dir()
summary(mymgarch)
mymgarch
coef(fg)
library(tseries)
predict
shoMethods("predict")
showMethods("predict")
predict.fGARCH
getMethod
getMethod(predict)
predict.tseries
library(help = tseries)
predict.garch
getmethod
getMethod
getMethod("predict.garch")
predict(fg, n.ahead = 10)
coef(fg)
plot(predict(fg, n.ahead = 10))
plot(predict(fg, n.ahead = 10)[, 2])
plot(predict(fg, n.ahead = 10)[, 3])
plot(predict(fg, n.ahead = 50)[, 3])
plot(predict(fg, n.ahead = 100)[, 3])
plot(predict(fg, n.ahead = 1000)[, 3])
predict(fg, n.ahead = 100)[, 3]
?diff
testll
fg@fit$ll
mymgarch
coef(fg)
var(xt)
xt
ls()
library(fGarch)
ls()
norm
base::norm
garchFit
match.arg
match.arg(c("mci", "uev")
)
match.arg(c("mci", "uev"))
test <- match.arg(c("mci", "uev"))
test <- match.arg("mci")
isUnivariate
NCOL
match.call
capture.output
?capture.output
capture.output("1:10")
capture.output("c(1:10)")
capture.output("a = c(1:10)")
example(glm)
1 + 1
isUnivariate
parse
?parse
formal.args
formalArgs
formalArgs(garchFit)
args(garchFit)
formalArgs(garchFit)
garchArgsParser
.garchArgsParser
.garchFit
.garchInitsSeries
.garchInitSeries
.garchInitParams
.garchInitParameters
library(help = fGarch)
show-methods
show-methods()
volatility
fGarch-class
fGARCH-class
garchFitControl
.garchFit
.garchOptimizeLLH
.garchRnlminb
.garchRnm
.garchLLH
.garchOptimizeLLH
.garchRnm
nlminb
?nlminb
.garchOptimize
.garchOptimizeLLH
.garchFit
.garchOptimizeLLH("ropt", , trace)
.garchOptimizeLLH("ropt", trace = TRUE)
.garchOptimizeLLH
.garchFit
garchFit
.garchFit
garchFit
(cond.dist == "QMLE")
.garchOptimizeLLH("ropt", TRUE, TRUE)
.garchOptimizeLLH
.garchLLH
getfGarchEnv
.getfGarchEnv
get
search()
.getfGarchEnv()
get(NULL)
get(ls())
ls()
ls(all.names = TRUE, envir = .fGarchEnv)
search()
.garchFit
garchFit
.garchFit
garchFit
.garchFit
.garchArgsParser
.help.ESS
ls()
dir()
library(lsei)
