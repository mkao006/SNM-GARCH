# ======================================== #
# Multivariate Scale Mixture Normal #
# ======================================== #
library(mvtnorm)
## constructor
msmn = function(x, sigma=NULL){
if(!is.numeric(x)) stop("x must be numeric")
if(is.vector(x)) x = matrix(x)
if(class(x)!="matrix") stop("x must be vector or matirx")
if(ncol(x)==1) sigma=matrix(1)
else sigma=cov(x)
data = list(x=x, sigma=sigma, sigma.inv=solve(sigma))
class(data) = "msmn"
data
}
## update sigma
setSigma = function(x, sigma){
if(ncol(sigma)!=nrow(sigma)) stop("sigma must be squared matrix")
if(ncol(sigma)!=dim(x)) stop("dimension of sigma must be same as dim(x)")
if(class(try(solve(sigma)))=="try-error") stop("sigma is singular")
x$sigma = sigma
x$sigma.inv = solve(sigma)
x
}
'[.msmn' = function(obj, i) msmn(x=obj$x[i,], sigma=obj$sigma)
mean.msmn = function(obj) apply(obj$x, 2, mean)
dim.msmn = function(obj) ncol(obj$x)
length.msmn = function(obj) nrow(obj$x)
cov.msmn = function(obj) cov(obj$x)
## information of 1-D msmn object,
## include sample mean, sample variance, fitted mean, fitted variance
info.msmn = function(x, beta, mix){
if(dim.msmn(x)==1){
tab = matrix(ncol=2, nrow=2)
dimnames(tab) = list(c("Sample", "Estimate"), c("mean", "var"))
tab[1,] = c(mean.msmn(x), cov.msmn(x))
tab[2,] = c(beta, sum(mix$pt*mix$pr))
} else{
stop("dimension not 1")
}
tab
}
