
######################################################################
## Benchmark and improve logd.mgarch function
######################################################################

library(rbenchmark)

## This shows that avoiding outer does speed up the process
t <- 1:1000
i <- 1:20

benchmark(outer(t, i, "-"), t - rep(i, each = length(t)), replications = 100,
          columns = c("test", "replications", "elapsed", "relative"),
          order = "relative")


## This shows that replacing sweep with vectorise version of the
## function speeds things up but the speed up reduces with data size

a <- matrix(1:90000, nc = 300)
b <- array(1:270000, dim = c(300, 300, 3))

vecOuter <- function(x, y){
    c <- rep(a, dim(b)[3])
    dim(c) = dim(b)
    c/b
}

benchmark(vecOuter(a, b), sweep(1/b, c(1, 2), a, FUN = "*"),
          replications = 10000, columns = c("test", "replications",
                              "elapsed", "relative"),
          order = "relative")
