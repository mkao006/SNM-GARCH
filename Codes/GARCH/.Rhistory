outer(c(1:4), c(1:2), "/")
args(sweep)
sweep(outer(c(1:4), c(1:2), "/"), 1, 2 "+")
sweep(outer(c(1:4), c(1:2), "/"), 1, 2, "+")
sweep(outer(c(1:4), c(1:2), "/"), 1, c(2, 3), "+")
sweep(outer(c(1:4), c(1:2), "/"), 2, c(2, 3), "+")
logd.mlogit
logd.cvp2
sweep(outer(c(1:4), c(1:5), "+"), c(1:2), 1.5, "+")
outer(c(1:4), c(1:5), "+")
sweep(outer(c(1:4), c(1:5), "+"), c(1:2), c(1.5, 2), "+")
array(1/2, dim = c(2, 2, 2))
sweep(array(1/2, dim = c(2, 2, 2)), 1, 2, "+")
sweep(array(1/2, dim = c(2, 2, 2)), 2, 2, "+")
sweep(array(1/2, dim = c(2, 2, 2)), 1, c(2, 3), "+")
sweep(array(1/2, dim = c(2, 2, 2)), c(1, 3), c(2:4), "+")
sweep(array(1/2, dim = c(2, 2, 2)), c(1, 3), c(1, 2), "+")
sweep(array(1/2, dim = c(2, 2, 2)), 3, c(1, 2), "+")
matrix(1:4, nc = 2)/matrix(1:4, nc = 2)
matrix(1:6, nc = 2)
dim(matrix(1:6, nc = 2))
fg@sigma.t
fg@sigma.t[1]
mean(nyse^2)
mean(nyse)
var(nyse)
sd(nyse)
sd(nyse[-1])
sd(nyse[1:10])
sd(nyse[1:30])
sd(nyse[1:20])
print(sd(nyse[1:50])
)
for(i in 1:50){
print(sd(nyse[1:i]))
}
ls()
sd(mnyse)
str(testFit)
args(array)
)
rep(1, 10)
str(testFit)(
str(testFit)
image(testFit$ld)
image(testFit$dt1)
image(testFit$dt2)
seq(1e-7, 0.001, length = 10)
sd(nyse)
var(nyse)
str(testFit)
head(g@sigma.t, 20)
head(fg@sigma.t, 20)
head(fg@sigma.t^2, 20)
image(testFit$ld)
image(testFit$ld)
str(testFit$ld)
head(testFit$ld)
head(testFit$ld)
head(testFit$ld)
testFit$ld[, 1]
plot(testFit$ld[, 1])
plot(testFit$ld[, 1], type = "l")
plot(testFit$ld[, 50], type = "l")
?image
plot(test$Fit[, 1], type = "l", ylim = c(0, 5))
plot(testFit$ld[, 1], type = "l", ylim = c(0, 5))
lines(testFit$ld[, 50], col = "red")
rm(check.mgarcH)
str(check.mgarch)
sum(check.mgarch$ld)
fg@ll
fg@llh
fg
log(1)
sd(mnyse)
fg@sigma.t
sd(mnyse)
fg@sigma.t[1]
fg@sigma.t[1]^2
var(mnyse)
str(check.mgarh)
str(check.mgarch)
plot(check.mgarch$sigma, type = "l")
lines(fg@sigma.t, col = "red", lty = 3)
head(fg@sigma.t)
head(check.mgarch$sigma)
var(nyse)
head(fg@sigma.t
)
head(check.mgarch$sigma)
fgcoef
fgcoef
coef(garchFit(data = nyse))
coef(garchFit(data = nyse))[2:4]
fgcoef
head(testll)
fg@llh
fg@fit$llh
args(cnmms)
head(cnmms)
head(cnmms, 30)
length(cnmms)
str(testFit)
coef(fg)
log(-1)
valid.mgarch(mnyse, -1:1, 1:3)
valid.mgarch(mnyse, 1:2, 1:3)
valid.mgarch(mnyse, 1:2, -1:3)
cnmms(mnyse)
grid
grid
grid
grid
mybeta
dg
dg
jmax
grad
maxgrad
dg
dg
grad
grad
cnmms
head(cnmms)
head(cnmms, 30)
grid
head(maxgrad)
head(maxgrad, 30)
pt
dg
grid
grad
grid
dg
jmax
length(jmax)
pt
range(mnyse, mybeta)
initial.mgarch(mnyse)
str(initial.mgarch(mnyse))
max(nyse)
max(nyse)/sd(nyse)
cnmms(mnyse)
grid
grid
dg
plot(dg)
plot(dg[-1])
jmax
grad
length(jmax)
pt
left
right
cnmms(mnyse)
str(initial.mgarch(mnyse))
cnmms(mnyse)
head(cnmms, 30)
cnmms(mnyse)
coef(fg)
coef(fg)[-1]
all(coef(fg)[-1]) > 0
cnmms(mnyse)
valid.mlogit
valid.rcvp
valid.cvp2
cnmms(mnyse)
coef(fg)

sigma
ploe(sigma)
t(sigma)
plot(sigma)
qnorm(0.95)
"
sqrt(sigma)
valid.mgarch(0, c(1, 2, 3))
valid.mgarch(0, c(1, 0.5, 0.4))
1 + 2 < 1
args(cnmms)
cnmms
plotgrad(mnyse, mybeta, mymix, myma,

                pch=19, order=0)
cnmms(mnyse)
warnings()
initial.mgarch
str(initial.mgarch(mnyse))
warnings()
nyse.mg
sum(nyse.mg$mix$pr * nyse.mg$pt^2)
sum(nyse.mg$mix$pr * nyse.mg$mix$pt^2)
nyse.mg
nyse.mg$beta
fg@beta
coef(fg)
coef(nyse.t0)
nyse.mg$beta
cnmms
dnorm
nyse.sigmat
plot(tnyse)
plot(tnyse, type = "l"))
plot(tnyse, type = "l")
plot(tmdg)
valid.mgarch(tmdg, initial.mgarch(tmdg)$beta, initial.mgarch(tmdg)$mix)
log(4) + log(3/2)
log(2) + log(3)
initial.mgarch(tmdg)
var(tmdg)
print.snpmle(4, tmdg, initial.mgarch(tmdg)$beta, initial.mgarch(tmdg)$mix)
initial.mgarch(tmdg)
print.smpmle
print.snpmle
initial.mgarch(tmdg)$beta
initial.mgarch(tmdg)$mix
print.snpmle(4, tmdg, initial.mgarch(tmdg)$beta, initial.mgarch(tmdg)$mix)
inistial.mgarch(tmdg)$mix$pt
initial.mgarch(tmdg)$mix$pt
initial.mgarch(tmdg)$mix$pr
print.snpmle(4, tmdg, initial.mgarch(tmdg)$mix, initial.mgarch(tmdg)$beta)
mysc
valid(tmdg, c(r$beta[1] * mysc, inits$beta[2], inits$beta[3] * mysc), inits$mix)
valid(tmdg, c(inits$beta[1] * mysc, inits$beta[2], inits$beta[3] * mysc), inits$mix)
valid(tmdg, c(inits$beta[1] * mysc, inits$beta[2], inits$beta[3] * mysc, inits$beta[4] * mysc), inits$mix)
dg.mg
sqrt(sum(dg.mg$mix$pr * dg.mg$mix$pt^2))
sqrt(sum(dg.mg$mix$pr * dg.mg$mix$pt^2))
coef(dg.t2)
coef(dg.t1)
coef(dg.t0)
args(cnmms)
sweep(matrix(c(1, 2, 3, 4)nc = 2), 1, c(1, 2), "+")
sweep(matrix(c(1, 2, 3, 4), nc = 2), 1, c(1, 2), "+")
matrix(c(1, 2, 3, 4))
matrix(c(1, 2, 3, 4), nc = 2)
coef(dg.t0)
coef(dg.t2)
0/124438 + 0.88465
0.124438 + 0.88465
coef(dg.t0)
coef(dg.t1)
cat("abc", "\n", "def", "\n")
cat(" abc", "\n", "def", "\n")
print.snpmle
proc.time
?proc.time
gormat
format
?format
z
     format(z, digits = 2, justify = "right", trim = FALSE)
?formatC
xx
rm(xx)
sqrt(sum(dg.mg$mix$pr * dg.mg$mix$pt^2))
bfgs
ls()
?break
coef(dg.t2)
dir()
rm(list = ls(all = TRUE))
length(sp)
sged
sped
sged
dged
head(tmnyse)
head(tmsp)
str(tmnyse)
str(tmsp)
nyse.mg
nyse.mg
rep(1:10, reach = T)
?rep
rep
rep(1:10, each = F)
test <- 1:10
test
dim(test) <- c(2, 5)
test
c(1:10)/rep(1:10, each = T)
t = 1:10
i = seq(0, 1, by = 0.1)
i
t
t/rep(i, each = TRUE)
t = 1:11
length(i)
t/rep(i, each = TRUE)
dt = t/rep(i, each = TRUE)
dt
dim(dt) = c(2, 3)
t = 1:10
i = seq(0.1, 1, by = 0.1)
length(i)
dt = t/rep(i, each = T)
dt
t
i
dim(dt) = c(2, 5)
dt
dim(dt) = c(2, 10)
t2 = 1:10
t1/t2
t/t2
t/t2 / rep(i, each = T)
t/t2 / rep(i, each = T) - rep(i, each = 10)
rep(i, each = 10)
rep(i, each = T)
rep(i, each = T)
1 - rep(i, each = T)
i
1 - i
c(1, 2) - rep(i, each = T)
t/t2 / rep(i, each = T) - rep(i, each = T)
t/t2/rep(i, each = lenghth(t))
t/t2/rep(i, each = lengh(t))
t/t2/rep(i, each = length(t))
t
i
t/rep(i, each = length(t))
test <- matrix(c(1:4), nc = 2)
test
c(1, 2) - test
check <- logd.mgarch(nyse, initial.mgarch(nyse)$beta, initial.mgarch(nyse)$mix, which = c(1, 0, 0, 0))
check <- logd.mgarch(nyse, initial.mgarch(nyse)$beta, initial.mgarch(nyse)$mix$pt, which = c(1, 0, 0, 0))
check <- logd.mgarch(nyse, initial.mgarch(nyse)$beta, initial.mgarch(nyse)$mix$pt, which = c(1, 0, 0, 0))
str(check)
image(check$ld)
check$ld
check$ld
check <- logd.mgarch(nyse, initial.mgarch(nyse)$beta, initial.mgarch(nyse)$mix$pt, which = c(1, 0, 0, 0))
str(check)
check <- logd.mgarch(nyse, initial.mgarch(nyse)$beta, initial.mgarch(nyse)$mix$pt, which = c(1, 0, 0, 0))
str(check)
head(check$ld)
rep(1:10, each = 2)
check <- logd.mgarch(nyse, initial.mgarch(nyse)$beta, initial.mgarch(nyse)$mix$pt, which = c(1, 0, 0, 0))
str(check)
check <- logd.mgarch(nyse, initial.mgarch(nyse)$beta, initial.mgarch(nyse)$mix$pt, which = c(1, 0, 0, 0))
str(check)
check <- logd.mgarch(nyse, initial.mgarch(nyse)$beta, initial.mgarch(nyse)$mix$pt, which = c(1, 0, 0, 0))
str(check)
check <- logd.mgarch(nyse, initial.mgarch(nyse)$beta, initial.mgarch(nyse)$mix$pt, which = c(1, 0, 0, 0))
str(check)
plot(check$ld)
-0.5 * (log(2 * pi) + log(1))
-0.5 * log(2 * pi) + log(1^2)
log(1)
check <- logd.mgarch(nyse, initial.mgarch(nyse)$beta, initial.mgarch(nyse)$mix$pt, which = c(1, 0, 0, 0))
str(check)
plot(check$ld)
str(tnyse)
str(nyse)
seq(0.1, 10, by = 0.1)
benchmark
library(benchmark)
lbenchmark
benchmark
args(benchmark
)
?benchmark
a
b
a/b
a - b
?array
.hel.ESS
.help.ESS
library(compiler)
f<-function(x,y){
    x+y
}
g<-function(x,y){
   f(x,y)
}

cmpf<-cmpfun(f)
cmpg<-cmpfun(g)

benchmark(1+2,f(1,2),g(1,2),cmpf(1,2),cmpg(1,2),cmpg2(1,2), replications =1000000, columns = c("test", "replications", "elapsed", "relative"),order='relative')
all(outer(t, i) == t - rep(i, each = length(t)))
all(outer(t, i) == t - rep(i, each = length(t)))
outer(t, i)
all(outer(t, i, "-") == t - rep(i, each = length(t)))
gg
di(b)
dim(b)
b
dim(b)
c
sweep
a
b
sweep(a, c(1, 2), b, "+")
sweep(b, c(1, 2), a, "+")
vecOuter(a, b)
all(veOuter(a, b) == sweep(b, c(1, 3), 1/a, FUN = "*"))
all(vecOuter(a, b) == sweep(b, c(1, 3), 1/a, FUN = "*"))
vecOuter(a, b)
sweep(b, c(1, 3), 1/a, FUN = "*")
vectorOuter(a, b)
vecOuter(a, b)
a
b
all(vecOuter(a, b) == sweep(b, c(1, 2), 1/a, FUN = "*"))
all(vecOuter(a, b) == sweep(b, c(2, 3), 1/a, FUN = "*"))
b
all(vecOuter(a, b) == sweep(1/b, c(2, 3), a, FUN = "*"))
all(vecOuter(a, b) == sweep(1/b, c(1, 3), a, FUN = "*"))
sweep(1/b, c(1, 3), a, FUN = "*")
sweep(1/b, c(1, 2), a, FUN = "*")
all(vecOuter(a, b) == sweep(1/b, c(1, 2), a, FUN = "*"))
sweep(1/b, c(1, 2), a, FUN = "*")
vecOuter(a, b)
vecOuter(a, b) - sweep(1/b, c(1, 2), a, FUN = "*")
array(c(a, a, a), dim = c(3, 3, 3))
30 * 30 * 3
str(a)
str(b)
test <- vecOuter(a, b)
300^2 * 3
source("functions.R")
c
rm(c)
source("functions.R")
source("functions.R")
rm(list = ls(all = TRUE))
source("functions.R")
rm(list = ls(all  TRUE)
)
rm(list = ls(all = TRUE))
source("functions.R")
?aperm.dafault
array(matrix(1:9, nc = 3), dim = c(3, 3, 3))
a <- 1:10
b <- 10:1
c <- 2:11
c(rep(a, 2), rep(b, 2), rep(c, 3))
array(c(rep(a, 2), rep(b, 2), rep(c, 3)), dim = c(10, 2, 3)
)
source("functions.R")
install.packages("tseries")
install.packages("tseries")
source("functions.R")
source("functions.R")
.help.ESS
?text
source("functions.R" <- 
source("functions.R")
check
source("functions.R")
check
-(1/check$sigma.t) + rep(1, 5)/(2 * 1^2 * sigma.t^2)
-(1/check$sigma.t) + rep(1, 5)/(2 * 1^2 * check$sigma.t^2)
-(1/check$sigma.t) + rep(1, 5)/(1^2 * check$sigma.t^2)
-(1/check$sigma.t) + rep(1, 5)/(1^2 * check$sigma.t^3)
-(1/check$sigma.t) + rep(1, 5)/(2^2 * check$sigma.t^3)
library(rbenchmark)
args(benchmark)
source("functions.R")
source("functions.R")
check
x = rnorm(30)
y = rnorm(30)
wv.plot(x, y, "~/Desktop/scatterplot", height=300, width=300, xlim=c(-2.5,2.5), ylim=c(-2.5,2.5), xbreaks=c(0), ybreaks=c(0))
check
source("functions.R")
source("functions.R")
source("functions.R")
test <- double(100)
test
test[3] = 2
test
source("functions.R")
source("functions.R")
check
source("functions.R")
source("functions.R")
source("functions.R")
source("functions.R")
1^0:3
source("functions.R")
source("functions.R")
source("functions.R")
check
source("functions.R")
tdg
source("functions.R")
source("functions.R")
check
check
source("functions.R")
source("functions.R")
source("functions.R")
matrix(1:8, nc = 2)
solve(matrix(1:8, nc = 2))
