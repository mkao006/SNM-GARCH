######################################################################
## This script is used to test whether the algorithm can recover the
## parameters of the original strucutre
######################################################################

library(compiler)
library(tseries)
library(fGarch)
source("~/dropbox/Uni Work/Masters Thesis/Codes/Constraint Newton Method/cnm.R")
source("~/dropbox/Uni Work/Masters Thesis/Codes/Constraint Newton Method/dden.R")

#source("functions.R")
#source("functionMeanSkew.R")
source("functionMean.R")
source("mgarchsim.R")


######################################################################
## Simulate the vanilla GARCH(1, 1) model
######################################################################

## mu = 0.001
## alpha = 0.8
## beta = 0.1
## distribution = normal(0, 1)

sim <- garchSim(garchSpec(model = list(mu = 1e-3), rseed = 123), n = 1000)
msim <- sim
class(msim) <- "mgarch"
sim.norm <- garchFit(data = sim, cond.dist = "norm")

system.time(
(sim.mg <- cnmms(msim, plot = "gradient", grid = 100, verb = 4))
)

## Simulation study to see which one does better at recovering the
## real structure.

paramTest <- function(replication, n){
    norm.dev <- double(3)
    mg.dev <- double(3)
    for(i in 1:replication){
        print(paste("Test: ", i, sep = ""))

        ## Generate the parameters
        alpha <- runif(1)
        beta <- runif(1, 0, 0.99 - alpha)
        mu <- rnorm(1, 0, 0.02)
        print(params <- c(alpha, beta, mu))

        ## Generate the artifical GARCH time series
        x <- garchSim(garchSpec(model = list(alpha = alpha,
                                             beta = beta,
                                             mu = mu)), n = n)
        mx <- as.numeric(x)
        class(mx) <- "mgarch"

        ## Fit the model
        norm.fit <- garchFit(data = x, cond.dist = "norm",
                             trace = FALSE)
        mg.fit <- try(cnmms(mx, grid = 100))

        ## Calculate the deviation by each parameter
        norm.dev <- norm.dev + abs(coef(norm.fit)[c(3, 4, 1)] - params)
        mg.dev <- mg.dev + abs(mg.fit$beta[c(3, 2, 5)] - params)
    }
    list(norm = norm.dev, mixture = mg.dev)
}

(simStudy <- paramTest(20, 300))

######################################################################
## Simulate GARCH(1, 1) with mixture distribution
######################################################################


## Mixture 1
## distribution = (1) pt = 0.8, w = 0.75
##                (2) pt = 1,   w = 0.15
##                (3) pt = 2.5, w = 0.1

mysim <- mgarchSim(model = c(1e-5, 0.8, 0.1, 1e-3), 500,
                   dden(c(0.8, 1, 2.5), c(0.75, 0.15, 0.1)),
                   seed = rnorm(1, 0, 1000))
msim <- mysim$x
plot(msim, type = "l")

(sim.mg <- cnmms(msim, plot = "gradient", grid = 100, verb = 4))

## Mixture 2
## distribution = (1) pt = 0.8, w = 0.6
##                (2) pt = 1.3, w = 0.4

mysim <- mgarchSim(model = c(1e-5, 0.8, 0.1, 1e-3), 800,
                   dden(c(0.8, 1.3), c(0.6, 0.4)),
                   seed = 587)
msim <- mysim$x
plot(msim, type = "l")

(sim.mg <- cnmms(msim, plot = "gradient", grid = 100, verb = 4))

## Mixture 3
## distribution = (1) pt = 0.6, w = 0.6
##                (2) pt = 1.2, w = 0.3
##                (3) pt = 2.8, w = 0.1

mysim <- mgarchSim(model = c(1e-5, 0.8, 0.1, 1e-3), 800,
                   dden(c(0.6, 1.2, 2.8), c(0.6, 0.3, 0.1)))
msim <- mysim$x
plot(msim, type = "l")

(sim.mg <- cnmms(msim, plot = "gradient", grid = 100, verb = 4))


## The above simulation results suggests that the algorithm might be a
## bit sensitive, but the recovery is not too bad.


## TODO: Investigate why the following error occurs all the time

## (1)
#        Error in if (ll >= ll1 && ll + g1d <= ll) { :
#          missing value where TRUE/FALSE needed
## (2)
#        Error in if (dg < 0) D = D + (1 + drop(t(g) %*% D %*% g)/dg)
#        * outer(d, :missing value where TRUE/FALSE needed

## TODO: Also test the fit of sigma0, since we know what it is.

