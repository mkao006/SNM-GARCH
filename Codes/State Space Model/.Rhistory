StructTS
load(tsa3.rda)
load("tsa3.rda")
ls()
dir()
ls()
dir()
load("tsa3.rda")
plot(x); lines(y, col = "red")
plot(x); lines(y, col = "red")
plot(x); lines(y, col = "red")
plot(x); lines(y, col = "red")
library(dlm)
UKgas
plot(UKgas)
nile
Nile
plot(Nile)
ls()
library('quantmod')


getSymbols("AAPL")
chartSeries(AAPL, subset='last 3 months')
addBBands()
chartSeries(AAPL, subset='last 3 months')
addBBands()
abline(h = 330)
abline(h = 330, col = "red"))
abline(h = 330, col = "red")
abline(h = 30, col = "red")
abline(h = 35, col = "green")
dir()
str(fitNile)
tsSmooth
tsSmooth(fitNile)
dlmMLE
mod
fit
library(numDeriv)
hessian
?hessian
str(smoothNile)
sm
hwidth
head(sm)
sm
fit
modNile
logLik
?logLik
kf
par
args(optim
)
optim
fit
fit
residNile
?forecast
forecast
forecast
foreNile
str(foreNile)
plot(x)
a
lines(y, col = "red")
plot(x); lines(y, col = "red")
plot(y, col = "red"); lines(x)
?kf
sim.fit
sim.fit
sim.fit$par
real.par
filtersim
sim.fit
sim.fit
sim.fit
sim.fi
sim.fit
sim.fit
sim.fit
sim.fit
sim.fit
fit
sim.fit
sim.fit
0.3^2
sqrt(0.3)
filtersim
smoothsim
sm
ahat
smoothsim
str(smoothsim0
)
str(smoothsim)
filtersim
str(filtersim)
sim.fit
sim.fit
sim.fit
sim.fit
?kf
sim.fit
sim.fit
?optim
simfit
sim.fit
sim.fit
?dlmModPoly
dlmModPoly()
fitNile
str(fitNile)
sim.fit
sim.fit
sim.fit
sim.fit
install.packages("rgarch", repos="http://R-Forge.R-project.org")
ls
dir()
rm("AIB.csv")
system("rm AIB.csv")
dir9)
dir()
gibbsOut$dV
kf
?kf
flout
f.out
yt
plot(yt)
str(yt)
plot.ts(yt)
plot.ts(c(yt))
plot(yt)
str(f.out)
lines(f.out$yt, col = "red")
head(yt)
head(f.out$yt)
lines(c(f.out$yt), col = "red")
str(f.out)
lines(f.out$Ft[, , 1:1000], col = "green")
lines(f.out$Kt[, , 1:1000], col = "green")
lines(f.out$ydimt, col = "green")
str(f.out)
ks(f.out)
str(test)
f.out
str(f.out)
library(help = KFAS)
data(kurit)
m1 <- SS(kurit)
phi(m1) <- c(100,5)
m0(m1) <- matrix(130)
C0(m1) <- matrix(400)
m1.f <- kfilter(m1)
plot(m1$y)
lines(m1.f$m,lty=2)
library(sspir)
data(kurit)
m1 <- SS(kurit)
phi(m1) <- c(100,5)
m0(m1) <- matrix(130)
C0(m1) <- matrix(400)
m1.f <- kfilter(m1)
plot(m1$y)
lines(m1.f$m,lty=2)
data(mumps)
index <- 1:length(mumps)
phi.start <- c(0,0,0.0005,0.0001)
m3 <- ssm( mumps ~ -1 + tvar(polytime(index,1)) +
tvar(polytrig(index,12,1)),
family=poisson(link=log),
phi=phi.start, C0 = diag(4),
fit=FALSE
)
C0(m3)
C0(m3) <- 10*diag(4)
Wold <- Wmat(m3)
Wmat(m3) <- function(tt,x,phi) {
W <- Wold(tt,x,phi)
if (tt==10) {W[2,2] <- 100*W[2,2]; return(W)}
else return(W)
}
m3.fit <- kfs(m3)
plot(mumps,type='l',ylab='Number of Cases',xlab='')
lines(exp(m3.fit$m[,1]),type='l',lwd=2)
data(kurit)
m1 <- SS(kurit)
phi(m1) <- c(100,5)
m0(m1) <- matrix(130)
C0(m1) <- matrix(400)
m1 <- kfilter(m1)
m1.s <- smoother(m1)
sim <- ksimulate(m1,10)
plot(kurit)
for (i in 1:10) lines(sim[,,i],lty=2,col=2)
lines(smoother(m1)$m,lwd=2)
data(kurit)

m1 <- SS(kurit)

phi(m1) <- c(100,5)

m0(m1) <- matrix(130)

C0(m1) <- matrix(400)

m1 <- kfilter(m1)

m1.s <- smoother(m1)

sim <- ksimulate(m1,100)

plot(kurit)

for (i in 1:100) lines(sim[,,i],lty=2,col=2)

lines(smoother(m1)$m,lwd=2)
dmoe(gas)
demo(gas)
demo(vandrivers)
demo(mumps)
getFamily
?getFamily
library(IEKS)
data(kurit) ## West & Harrison, page 40
m1 <- SS(y=kurit,
Fmat=function(tt,x,phi) return(matrix(1)),
Gmat=function(tt,x,phi) return(matrix(1)),
Wmat=function(tt,x,phi) return(matrix(5)), ## Alternatively Wmat=matrix(5)
Vmat=function(tt,x,phi) return(matrix(100)), ## Alternatively Vmat=matrix(100)
m0=matrix(130),C0=matrix(400)
)
m1
kfilter(m1)
kurit
str(y.ss)
ts(sim.t)
ts(sim.y)
str(m1)
str(y.ss)
str(m1)
str(y.ss)
str(ts(sim.y))
str(kurit)
str(y.ss)
str(m1)
str(sim.yts)
str(sim.yts
)
str(kurit)
y.kfit
head(y.kfit$y)
head(y.kfit$ym)
data(kurit)
m1 <- SS(kurit)
phi(m1) <- c(100,5)
m0(m1) <- matrix(130)
C0(m1) <- matrix(400)
m1.f <- kfilter(m1)
plot(m1$y)
lines(m1.f$m,lty=2)
data(kurit) ## West & Harrison, page 40
m1 <- SS(y=kurit,
Fmat=function(tt,x,phi) return(matrix(1)),
Gmat=function(tt,x,phi) return(matrix(1)),
Wmat=function(tt,x,phi) return(matrix(5)), ## Alternatively Wmat=matrix(5)
Vmat=function(tt,x,phi) return(matrix(100)), ## Alternatively Vmat=matrix(100)
m0=matrix(130),C0=matrix(400)
)
plot(m1$y)
m1.f <- kfilter(m1)
m1.s <- smoother(m1.f)
lines(m1.f$m,lty=2,col=2)
lines(m1.s$m,lty=2,col=2)
lines(m1.s$m,lty=2,col=3)
m1 <- SS(y=kurit,
Fmat=function(tt,x,phi) return(matrix(1)),
Gmat=function(tt,x,phi) return(matrix(1)),
Wmat=function(tt,x,phi) return(matrix(5)), ## Alternatively Wmat=matrix(5)
Vmat=function(tt,x,phi) return(matrix(100)), ## Alternatively Vmat=matrix(100)
m0=matrix(13),C0=matrix(40)
)
plot(m1$y)
m1.f <- kfilter(m1)
m1.s <- smoother(m1.f)
lines(m1.f$m,lty=2,col=2)
lines(m1.s$m,lty=2,col=2)
m1 <- SS(y=kurit,
data(kurit) ## West & Harrison, page 40
m1 <- SS(y=kurit,
Fmat=function(tt,x,phi) return(matrix(1)),
Gmat=function(tt,x,phi) return(matrix(1)),
Wmat=function(tt,x,phi) return(matrix(5)), ## Alternatively Wmat=matrix(5)
Vmat=function(tt,x,phi) return(matrix(100)), ## Alternatively Vmat=matrix(100)
m0=matrix(130),C0=matrix(400)
)
plot(m1$y)
m1.f <- kfilter(m1)
m1.s <- smoother(m1.f)
lines(m1.f$m,lty=2,col=2)
lines(m1.s$m,lty=2,col=2)
m2 <- m1
Wmat(m2) <- function(tt,x,phi) {
if (tt==10) return(matrix(900))
else return(matrix(5))
}
m2.f <- kfilter(m2)
m2.s <- smoother(m2.f)
lines(m2.f$m,lty=2,col=4)
lines(m2.s$m,lty=2,col=4)
phi.start <- StructTS(log10(UKgas),type="BSM")$coef[c(4,1,2,3)]
gasmodel <- ssm( log10(UKgas) ~ -1+
tvar(polytime(time,1))+
tvar(sumseason(time,12)),
phi=phi.start)
m0(gasmodel)
C0(gasmodel)
phi(gasmodel)
fit <- getFit(gasmodel)
plot( fit$m[,1:3] )
kf
kfilter0
kfilter
a <- c(5, 7, 9, 9, 8, 6, 4, 8, 7, 7)
b <- c(6, 7, 4, 4, 8, 7, 3, 9, 5, 8)

cor.test(a, b, method="spearman")
a <- c(5, 7, 9, 9, 8, 6, 4, 8, 7, 7)
b <- c(6, 7, 4, 4, 8, 7, 3, 9, 5, 8)
 
cor.test(a, b, method="kendall")

plot(1, b)
plot(a, b)
cor(a, b)
a <- c(1:100)
b <- a^2
cor(a, b)
plot(a, b)
cor(a, b, method = "kendall")
cor(a, b, method = "spearman")
b <- a^5
cor(a, b)
cor(a, b, method = "kendall")
cor(a, b, method = "spearman")
plot(a, b)
library(caret)
library(lattice)
library(latticeExtra)
library(maps)
library(geosphere)
library(sp)
library(maptools)
library(raster)

airports <- read.csv("http://datasets.flowingdata.com/tuts/maparcs/airports.csv", header=TRUE)
flights <- read.csv("http://datasets.flowingdata.com/tuts/maparcs/flights.csv", header=TRUE, as.is=TRUE)
makeLines <- function(x){
  air1 <- airports[airports$iata == x[2],]##start
  air2 <- airports[airports$iata == x[3],]##end
  inter <- gcIntermediate(c(air1[1,]$long, air1[1,]$lat),
                          c(air2[1,]$long, air2[1,]$lat),
                          n=100,
                          sp=TRUE, addStartEnd=TRUE)
  inter@lines[[1]]@ID <- as.character(x[4])##cnt
  inter
}

fsub <- flights[flights$airline == "AA",]
fsub <- fsub[order(fsub$cnt),]
linesAA <- apply(fsub, 1, makeLines)

colIndex <- function(x, cnt, palette)palette[match(x, cnt)]
makePlot <- function(x, cnt, palette){
  idx <- as.numeric(x@lines[[1]]@ID)
  sp.lines(x, col.line=colIndex(idx, cnt, palette))
}

cnt <- fsub$cnt
breaks <- do.breaks(range(cnt), 30)
palLines <- colorRampPalette(brewer.pal('Greens', n=9))
colors <-level.colors(cnt,
                      at = breaks,
                      col.regions = palLines)

elevUSA <- raster('USA_alt/USA1_msk_alt.grd')
prj <- CRS("+proj=longlat +datum=WGS84")
projection(elevUSA) <- prj
elevUSAsp <- as(sampleRegular(elevUSA, 5e5, asRaster=TRUE), 'SpatialGridDataFrame')

dir()
dir()
library(KFAS)
sim.fit
library(cairo)
library(Cairo)
library(forecast)
ts.inter
library(help =forecast)
na.interp
approx
?approx
na.approx
?na.approx
na.inter
na.interp
maxadjr
library(faraway)
library(help = faraway)
s <- rnorm(10)
seq <- s
seq
s
 rm(seq)
seq
segmented
lm
lm.ridge
library(MASS)
lm.ridge
?lm.ridge
base::seq
pos
ls(pos = 1)
ls(pos = 2)
ls(pos = 0)
ls(pos = 3)
ls(pos = 4)
plot(c(1:100)^2)
lines(loess(c(1:100)^2 ~ c(1:100)))
lines(loess(c(1:100)^2 ~ c(1:100)), col = "red")
library(sem)
sem
?sem
library(pls)
pls
library(Sim.DiffProc)
load("tsa3.rda")
lag.plot1
nyse
lag.plot1(nyse)
