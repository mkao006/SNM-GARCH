SVfilter <- function(num, y, phi0, phi1, sQ, alpha, sR0, mu1, sR1){
    ## Initialise the parameters
    y <- as.matrix(y)
    Q <- sQ^2
    R0 <- sR0^2
    R1 <- sR1^2
    xf <- 0     	     #  <- h_0^0
    Pf <- sQ^2/(1-phi1)     #  <- P_0^0
    Pf[Pf<0] <- 0           # make sure Pf not negative
    xp <- matrix(0,num,1)   #  <- h_t^t-1
    Pp <- matrix(0,num,1)   #  <- P_t^t-1
    pi1 <- .5    #initial mix probs
    pi0 <- .5
    fpi1 <- .5
    fpi0 <- .5
    like <- 0                  # -log(likelihood)
    for (i in 1:num){
        xp[i] <- phi1 * xf + phi0
        Pp[i] <- phi1 * Pf * phi1 + Q
        sig1 <- Pp[i] + R1     #innov var
        sig0 <- Pp[i] + R0
        k1 <- Pp[i]/sig1
        k0 <- Pp[i]/sig0
        e1 <- y[i] - xp[i] - mu1 - alpha
        e0 <- y[i] - xp[i] - alpha

        den1 <- (1/sqrt(sig1)) * exp(-0.5 * e1^2/sig1)
        den0 <- (1/sqrt(sig0)) * exp(-0.5 * e0^2/sig0)
        denom <- pi1 * den1 + pi0 * den0
        fpi1 <- pi1 * den1/denom
        fpi0 <- pi0 * den0/denom

        xf <- xp[i] + fpi1 * k1 * e1 + fpi0 * k0 * e0
        Pf <- fpi1 * (1 - k1) * Pp[i] + fpi0 * (1 - k0) * Pp[i]
        like <- like - 0.5 * log(pi1 * den1 + pi0 * den0)
    }
    list(xp = xp, Pp = Pp, like = like)
}
